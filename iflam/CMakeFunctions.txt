# vim: filetype=cmake
########################################################
# Setup BOOST

macro(ADD_BOOST)
  set(Boost_USE_STATIC_LIBS ON)
  set(Boost_DEBUG ON)
  set(BOOST_ROOT "$ENV{HOME}/homebrew/Cellar/boost/1.50.0")
  set(BOOST_INCLUDEDIR "${BOOST_ROOT}/include")
  set(BOOST_LIBRARYDIR "${BOOST_ROOT}/lib")
  find_package(Boost 1.50 REQUIRED
    exception program_options unit_test_framework filesystem system
    )

  if (Boost_FOUND)
    message(STATUS "Boost include dir: ${Boost_INCLUDE_DIR}")
    message(STATUS "Boost library dir: ${Boost_INCLUDE_DIRS}")
    message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
    include_directories(${Boost_INCLUDE_DIR})
    link_directories(${Boost_LIBRARY_DIRS})

    add_definitions(-DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS)
    add_definitions(-DBOOST_MPL_LIMIT_LIST_SIZE=50)
  endif()
endmacro(ADD_BOOST)

macro(ADD_PNG)
  set(PNG_INCLUDE_DIR "$ENV{HOME}/homebrew/include")
  find_package(PNG REQUIRED)

  if (PNG_FOUND)
    message(STATUS "PNG include dir: ${PNG_INCLUDE_DIR}")
    include_directories(${PNG_INCLUDE_DIR})
  endif()
endmacro(ADD_PNG)

macro(ADD_HDF5)
  find_package(HDF5 1.8.8 REQUIRED)
  if (HDF5_FOUND)
    message(STATUS "HDF5 include dir: ${HDF5_INCLUDE_DIR}")
    message(STATUS "HDF5 libraries: ${HDF5_LIBRARIES}")
    include_directories(${HDF5_INCLUDE_DIR})

  endif()

endmacro(ADD_HDF5)

macro(COMPILE_XIB _target _xib)
  FIND_PROGRAM( IBTOOL ibtool HINTS "/usr/bin" "${OSX_DEVELOPER_ROOT}/usr/bin" )
  if ( ${IBTOOL} STREQUAL "IBTOOL-NOTFOUND" )
      MESSAGE( SEND_ERROR "ibtool can not be found" )
  ENDIF()

  set(_resources_dir ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${_target}.app/Contents/Resources)
  get_filename_component(_base_name ${_xib} NAME_WE)

  # TODO: add DEPENDS section
  # TODO: extract
  add_custom_command (TARGET ${_target} POST_BUILD
    COMMAND mkdir -p ${_resources_dir} &&
    ${IBTOOL} --errors --warnings --notices --output-format human-readable-text
    --compile ${_resources_dir}/${_base_name}.nib
    ${CMAKE_CURRENT_SOURCE_DIR}/${_xib}
    COMMENT "Compiling ${CMAKE_CURRENT_SOURCE_DIR}/${_xib}")

endmacro(COMPILE_XIB)

macro(PBXCP _target _from _to)
  set(_resources_dir ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${_target}.app/Contents/Resources/${_to})

  add_custom_command(
    TARGET ${_target}
    POST_BUILD
    COMMAND mkdir -p ${_resources_dir} && /Developer/Library/PrivateFrameworks/DevToolsCore.framework/Resources/pbxcp -exclude .DS_Store -exclude CVS -exclude .svn -resolve-src-symlinks ${CMAKE_CURRENT_SOURCE_DIR}/${_from} ${_resources_dir}
    COMMENT "Copying ${_from} to ${_resources_dir}"
    )
endmacro(PBXCP)

MACRO(PARSE_ARGUMENTS prefix arg_names option_names)
  SET(DEFAULT_ARGS)
  FOREACH(arg_name ${arg_names})
    SET(${prefix}_${arg_name})
  ENDFOREACH(arg_name)
  FOREACH(option ${option_names})
    SET(${prefix}_${option} FALSE)
  ENDFOREACH(option)

  SET(current_arg_name DEFAULT_ARGS)
  SET(current_arg_list)
  FOREACH(arg ${ARGN})
    SET(larg_names ${arg_names})
    LIST(FIND larg_names "${arg}" is_arg_name)
    IF (is_arg_name GREATER -1)
      SET(${prefix}_${current_arg_name} ${current_arg_list})
      SET(current_arg_name ${arg})
      SET(current_arg_list)
    ELSE (is_arg_name GREATER -1)
      SET(loption_names ${option_names})
      LIST(FIND loption_names "${arg}" is_option)
      IF (is_option GREATER -1)
	     SET(${prefix}_${arg} TRUE)
      ELSE (is_option GREATER -1)
	     SET(current_arg_list ${current_arg_list} ${arg})
      ENDIF (is_option GREATER -1)
    ENDIF (is_arg_name GREATER -1)
  ENDFOREACH(arg)
  SET(${prefix}_${current_arg_name} ${current_arg_list})
ENDMACRO(PARSE_ARGUMENTS)

# (CPP <from> <to> [DEPENDS list])
macro(CPP _from _to) # deps
  PARSE_ARGUMENTS(CPP
    "DEPENDS;FLAGS"
    ""
    ${ARGN})
  add_custom_command(
    OUTPUT ${_to}
    COMMAND cpp ${CPP_FLAGS} ${_from} ${_to}
    DEPENDS ${_from} ${CPP_DEPENDS})
endmacro(CPP)

# (BIN2C <from> <to>)
macro(BIN2C _from _to ...) # deps
  add_custom_command(
    OUTPUT ${_to}
    COMMAND bin2c -c -z ${_from} ${_to}
    DEPENDS ${_from} bin2c)
endmacro(BIN2C)

# vim: filetype=cmake
########################################################
# Setup BOOST

macro(ADD_BOOST)
  set(Boost_USE_STATIC_LIBS ON)
  set(Boost_DEBUG ON)
  set(BOOST_ROOT "$ENV{HOME}/Packages/boost_1_48_0")
  set(BOOST_INCLUDEDIR "${BOOST_ROOT}")
  set(BOOST_LIBRARYDIR "${BOOST_ROOT}/stage/lib")
  find_package(Boost 1.48 REQUIRED 
    # exception program_options unit_test_framework
    )

  if (Boost_FOUND)
    message(STATUS "Boost include dir: ${Boost_INCLUDE_DIR}")
    message(STATUS "Boost library dir: ${Boost_INCLUDE_DIRS}")
    message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
    include_directories(${Boost_INCLUDE_DIR})
    link_directories(${Boost_LIBRARY_DIRS})

    add_definitions(-DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS)
    add_definitions(-DBOOST_MPL_LIMIT_LIST_SIZE=30)
  endif()
endmacro(ADD_BOOST)

macro(ADD_PNG)
  find_package(PNG REQUIRED)

  set(PNG_INCLUDE_DIR "/usr/X11/include/")
  if (PNG_FOUND)
    message(STATUS "PNG include dir: ${PNG_INCLUDE_DIR}")
    include_directories(${PNG_INCLUDE_DIR})
  endif()
endmacro(ADD_PNG)

macro(ADD_HDF5)
  find_package(HDF5 1.8.8 REQUIRED)
  if (HDF5_FOUND)
    message(STATUS "HDF5 include dir: ${HDF5_INCLUDE_DIR}")
    message(STATUS "HDF5 libraries: ${HDF5_LIBRARIES}")
    include_directories(${HDF5_INCLUDE_DIR})

  endif()

endmacro(ADD_HDF5)

macro(COMPILE_XIB _target _xib)
  FIND_PROGRAM( IBTOOL ibtool HINTS "/usr/bin" "${OSX_DEVELOPER_ROOT}/usr/bin" )
  if ( ${IBTOOL} STREQUAL "IBTOOL-NOTFOUND" )
      MESSAGE( SEND_ERROR "ibtool can not be found" )
  ENDIF()

  set(_resources_dir ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${_target}.app/Contents/Resources)
  get_filename_component(_base_name ${_xib} NAME_WE)

  # TODO: add DEPENDS section
  # TODO: extract
  add_custom_command (TARGET ${_target} POST_BUILD
    COMMAND mkdir -p ${_resources_dir} &&
    ${IBTOOL} --errors --warnings --notices --output-format human-readable-text
    --compile ${_resources_dir}/${_base_name}.nib
    ${CMAKE_CURRENT_SOURCE_DIR}/${_xib}
    COMMENT "Compiling ${CMAKE_CURRENT_SOURCE_DIR}/${_xib}")

endmacro(COMPILE_XIB)

